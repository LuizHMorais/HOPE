{
  "name": "Etapa1AiFactory - Fluxo IA V2.5",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 8
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1792,
        144
      ],
      "id": "e90b1125-7c62-4cbc-91d9-9b3c323511ab",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1h-xknv9IelCmariwIkh0lIGhSgwgQzHoG6V9nB9dsps",
          "mode": "list",
          "cachedResultName": "Dados App Financeiro",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1h-xknv9IelCmariwIkh0lIGhSgwgQzHoG6V9nB9dsps/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 314354577,
          "mode": "list",
          "cachedResultName": "Transactions",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1h-xknv9IelCmariwIkh0lIGhSgwgQzHoG6V9nB9dsps/edit#gid=314354577"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1376,
        176
      ],
      "id": "8bcf441e-34cc-44dd-8fcd-101d90d4f81e",
      "name": "Get Transactions",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "uW5EFVki21ARxBHX",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1h-xknv9IelCmariwIkh0lIGhSgwgQzHoG6V9nB9dsps",
          "mode": "list",
          "cachedResultName": "Dados App Financeiro",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1h-xknv9IelCmariwIkh0lIGhSgwgQzHoG6V9nB9dsps/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 963809764,
          "mode": "list",
          "cachedResultName": "Accounts",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1h-xknv9IelCmariwIkh0lIGhSgwgQzHoG6V9nB9dsps/edit#gid=963809764"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1504,
        48
      ],
      "id": "56cdca31-2773-49a1-898d-5a6f1c85cfac",
      "name": "Get Accounts",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "uW5EFVki21ARxBHX",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1h-xknv9IelCmariwIkh0lIGhSgwgQzHoG6V9nB9dsps",
          "mode": "list",
          "cachedResultName": "Dados App Financeiro",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1h-xknv9IelCmariwIkh0lIGhSgwgQzHoG6V9nB9dsps/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 250762612,
          "mode": "list",
          "cachedResultName": "People",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1h-xknv9IelCmariwIkh0lIGhSgwgQzHoG6V9nB9dsps/edit#gid=250762612"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1504,
        -128
      ],
      "id": "147b4a93-8a37-4afc-8000-765f64a5eb13",
      "name": "Get People",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "uW5EFVki21ARxBHX",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1h-xknv9IelCmariwIkh0lIGhSgwgQzHoG6V9nB9dsps",
          "mode": "list",
          "cachedResultName": "Dados App Financeiro",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1h-xknv9IelCmariwIkh0lIGhSgwgQzHoG6V9nB9dsps/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Dashboard",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1h-xknv9IelCmariwIkh0lIGhSgwgQzHoG6V9nB9dsps/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1328,
        320
      ],
      "id": "06bdabe2-64ce-4840-80e4-dfbea0502ae9",
      "name": "Get Dashboard",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "uW5EFVki21ARxBHX",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -992,
        192
      ],
      "id": "78391453-f7d4-46f6-81a3-c7c3cdd5497c",
      "name": "Merge1"
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1136,
        64
      ],
      "id": "db6cc572-fbcd-4377-8f61-26c9afb1975d",
      "name": "Merge2"
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1312,
        -64
      ],
      "id": "79f5e06e-dcae-42c4-a620-9d8e0e24cf3e",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "// === Helpers ===\nconst num = (v) => (isFinite(+v) ? +v : 0);\nconst toISO = (d) => d.toISOString().slice(0,10);\nconst parse = (s) => { const d = new Date(s); return isNaN(d) ? null : d; };\nconst inWindowMaker = (fromISO, toISO_) => (s) => {\n  const d = parse(s);\n  return d && d >= parse(fromISO) && d <= parse(toISO_);\n};\n\n// Safe fetch of items from a node by any of candidate names\nfunction safeItems(candidates) {\n  for (const name of candidates) {\n    try {\n      const arr = $items(name, 0, 0);\n      if (Array.isArray(arr)) return arr.map(i => i.json);\n    } catch (e) { /* ignore */ }\n  }\n  return [];\n}\n\n// === Resolve data range (3 months) without needing Set Params ===\nconst now = new Date();\nconst from = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth()-3, now.getUTCDate()));\nconst DATE_TO = toISO(now);\nconst DATE_FROM = toISO(from);\nconst inWindow = inWindowMaker(DATE_FROM, DATE_TO);\n\n// === Read the 4 sources (tolerant names) ===\nconst PEOPLE = safeItems(['Get People','People','GET People','GetPeople']);\nconst ACCOUNTS = safeItems(['Get Accounts','Accounts','GET Accounts','GetAccounts']);\nconst TXS = safeItems(['Get Transactions','Transactions','GET Transactions','GetTransactions']);\nconst DASH = safeItems(['Get Dashboard','Dashboard','GET Dashboard','GetDashboard']);\n\n// If nothing came, fail early with a clear message\nif (!PEOPLE.length) {\n  return [{ json: { error: true, message: 'People vazio: confira o nome do nÃ³ (ex.: \"Get People\") e se ele executa antes deste Code node.' } }];\n}\n\n// --- Indexers ---\nconst accountsByLink = new Map();   // link_id -> [account]\nconst accountsByKey  = new Map();   // (link|account_number) -> account\n\nfor (const a of ACCOUNTS) {\n  const link = a.link_id || a.link || '';\n  if (!link) continue;\n  const accNumber = (a.account_number ?? a.number ?? '').toString();\n  const key = accNumber ? `${link}|${accNumber}` : null;\n\n  const accountObj = {\n    account_id: a.account_id || a.id || '',\n    account_name: a.account_name || a.name || '',\n    account_number: accNumber || '',\n    institution_name: a.institution_name || '',\n    institution_type: a.institution_type || '',\n    currency: a.currency || '',\n    balance_current: num(a.balance_current),\n    balance_available: num(a.balance_available),\n    funds_total: num(a.funds_total),\n    liability_outstanding: num(a.liability_outstanding),\n    balance_type: a.balance_type || '',\n    last_updated: a.last_updated || a.collected_at || a.created_at || ''\n  };\n\n  if (!accountsByLink.has(link)) accountsByLink.set(link, []);\n  accountsByLink.get(link).push(accountObj);\n  if (key) accountsByKey.set(key, accountObj);\n}\n\n// Transactions index: prefer account_id; fallback link+account_number\nconst txByAccount = new Map(); // account_id -> [tx]\nconst txByKey = new Map();     // (link|account_number) -> [tx]\n\nfor (const t of TXS) {\n  const link = t.link_id || t.link || '';\n  const accId = t.account_id || (t.account && (t.account.id || t.account.account_id)) || '';\n  const accNumber = (t.account_number ?? t.number ?? '').toString();\n  const key = (link && accNumber) ? `${link}|${accNumber}` : null;\n\n  const date = t.value_date || t.posted_date || t.date || t.booking_date || '';\n  if (!inWindow(date)) continue;\n\n  const txObj = {\n    transaction_id: t.transaction_id || t.id || '',\n    amount: num(t.amount),\n    currency: t.currency || '',\n    category: t.category || '',\n    description: t.description || t.concept || '',\n    value_date: date,\n    type: t.type || '',\n    status: t.status || ''\n  };\n\n  if (accId) {\n    if (!txByAccount.has(accId)) txByAccount.set(accId, []);\n    txByAccount.get(accId).push(txObj);\n  } else if (key) {\n    if (!txByKey.has(key)) txByKey.set(key, []);\n    txByKey.get(key).push(txObj);\n  }\n}\n\n// Dashboard 1:1\nconst dashByLink = new Map();\nfor (const d of DASH) {\n  const link = d.link_id || d.link || '';\n  if (!link) continue;\n  dashByLink.set(link, d);\n}\n\n// --- Build nested owners (max = PEOPLE length, ex.: 42) ---\nconst out = [];\n\nfor (const p of PEOPLE) {\n  const link = p.link_id || p.link || '';\n  if (!link) continue;\n\n  const ownerBase = {\n    link_id: link,\n    owner_id: p.owner_id || '',\n    person_alias: p.person_alias || p.display_name || '',\n    first_name: p.first_name || '',\n    last_name: p.last_name || '',\n    email: p.email || '',\n    phone: p.phone || '',\n    document_type: p.document_type || '',\n    document_number: p.document_number || '',\n    created_at: p.created_at || '',\n    collected_at: p.collected_at || '',\n    src: p.src || 'people',\n    window_from: DATE_FROM,\n    window_to: DATE_TO\n  };\n\n  const dashboard = dashByLink.get(link);\n  if (dashboard) ownerBase.dashboard = dashboard;\n\n  const ownerAccounts = (accountsByLink.get(link) || []).map(acc => {\n    let txList = (acc.account_id && txByAccount.get(acc.account_id)) || [];\n    if ((!txList || txList.length === 0) && acc.account_number) {\n      const k = `${link}|${acc.account_number}`;\n      txList = txByKey.get(k) || [];\n    }\n    txList.sort((a,b) => (b.value_date || '').localeCompare(a.value_date || ''));\n    return { ...acc, transactions: txList };\n  });\n\n  out.push({ json: { ...ownerBase, accounts: ownerAccounts } });\n}\n\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -816,
        192
      ],
      "id": "5ecb3018-e757-41eb-ade4-0d41d6d4753f",
      "name": "Build Nested Owners"
    },
    {
      "parameters": {
        "jsCode": "const now = new Date();\nconst yyyy = now.getUTCFullYear();\nconst mm = String(now.getUTCMonth()+1).padStart(2,'0');\nconst dd = String(now.getUTCDate()).padStart(2,'0');\nconst date_to = `${yyyy}-${mm}-${dd}`;\nconst from = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth()-3, now.getUTCDate()));\nconst fyyyy = from.getUTCFullYear();\nconst fmm = String(from.getUTCMonth()+1).padStart(2,'0');\nconst fdd = String(from.getUTCDate()).padStart(2,'0');\nconst date_from = `${fyyyy}-${fmm}-${fdd}`;\nreturn [{ json: { date_from, date_to, model: 'llama3:8b', temperature: 0.2, currency: 'BRL' } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1648,
        144
      ],
      "id": "31c46057-e27f-42eb-85c4-9e92686ee754",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -576,
        192
      ],
      "id": "89eaf9ca-db5a-4c61-bd8b-66eb17ad27ef",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "jsCode": "// Prep Insights v4 (curto e direto)\nconst o = $json;\nconst ACCS = Array.isArray(o.accounts) ? o.accounts : [];\nconst num = v => (isFinite(+v) ? +v : 0);\n\nlet fromISO = o.window_from, toISO_ = o.window_to;\nif (!fromISO || !toISO_) {\n  const now = new Date();\n  const from = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth()-3, now.getUTCDate()));\n  fromISO = from.toISOString().slice(0,10);\n  toISO_  = now.toISOString().slice(0,10);\n}\n\nlet assets=0, liab=0, bal=0, txc=0, inflow=0, outflow=0;\nconst topAcc = [];\nconst cat = new Map();\n\nfor (const a of ACCS) {\n  const b = num(a.balance_current ?? a.funds_total ?? 0);\n  bal += b;\n  if ((a.balance_type||'').toUpperCase()==='LIABILITY') liab += Math.abs(b); else assets += Math.max(b,0);\n  topAcc.push({account_id:a.account_id||'',account_name:a.account_name||a.name||'',institution_name:a.institution_name||'',balance_current:b,currency:a.currency||'BRL'});\n  for (const t of (a.transactions||[])) {\n    const amt = num(t.amount);\n    if (amt>=0) inflow+=amt; else outflow+=Math.abs(amt);\n    const c = String(t.category||'uncategorized').toLowerCase();\n    cat.set(c, (cat.get(c)||0) + Math.abs(amt));\n  }\n}\ntopAcc.sort((x,y)=>(y.balance_current||0)-(x.balance_current||0));\nconst topCats = [...cat.entries()].sort((a,b)=>b[1]-a[1]).slice(0,4).map(([category,total])=>({category,total:+total.toFixed(2)}));\n\nconst metrics = {\n  link_id: o.link_id||'',\n  owner_id: o.owner_id||'',\n  person: { alias:o.person_alias||o.display_name||'', first_name:o.first_name||'', last_name:o.last_name||'', email:o.email||'' },\n  window: { from: fromISO, to: toISO_ },\n  accounts_summary: {\n    count: ACCS.length, assets_total:+assets.toFixed(2), liabilities_total:+liab.toFixed(2),\n    balance_total:+bal.toFixed(2), top_accounts: topAcc.slice(0,3),\n  },\n  transactions_summary: {\n    count: txc, inflow_sum:+inflow.toFixed(2), outflow_sum:+outflow.toFixed(2),\n    net_flow:+(inflow-outflow).toFixed(2), top_categories: topCats\n  },\n  currency: 'BRL',\n};\n\n// prompt curto + âno-genericâ\nconst system = 'Responda SOMENTE JSON vÃ¡lido UTF-8 no formato {\"insights\":[...]}.';\nconst user = `Contexto BRL (compacto):\n${JSON.stringify({\n  link_id: metrics.link_id,\n  window: metrics.window,\n  accounts_summary: metrics.accounts_summary,\n  transactions_summary: metrics.transactions_summary\n})}\nRegras:\n- AtÃ© 3 insights Ãºteis, nada genÃ©rico.\n- Use dados: concentraÃ§Ã£o por conta, categorias, inflow/outflow, qualidade de dados (ex.: uncategorized alto, outflow=0).\n- Campos curtos (<=140 chars). category â [\"spending\",\"income\",\"savings\",\"subscriptions\",\"alerts\",\"investments\",\"cashflow\"].\n\nSchema:\n{\"type\":\"object\",\"required\":[\"insights\"],\"properties\":{\"insights\":{\"type\":\"array\",\"maxItems\":3,\"items\":{\"type\":\"object\",\"required\":[\"title\",\"summary\",\"category\",\"priority\",\"confidence\",\"suggested_action\"],\"properties\":{\"title\":{\"type\":\"string\"},\"summary\":{\"type\":\"string\"},\"category\":{\"type\":\"string\"},\"priority\":{\"type\":\"string\",\"enum\":[\"low\",\"medium\",\"high\"]},\"confidence\":{\"type\":\"number\",\"minimum\":0,\"maximum\":1},\"suggested_action\":{\"type\":\"string\"}}}}}}\nSaÃ­da: SOMENTE {\"insights\":[...]}.`;\n\nreturn [{\n  json: {\n    link_id: metrics.link_id,\n    owner_id: metrics.owner_id,\n    date_from: metrics.window.from,\n    date_to: metrics.window.to,\n    metrics_json: JSON.stringify(metrics),\n    system,              // <â adiciona\n    user,                // <â adiciona\n    body: {\n      model: \"llama3.2:3b\",\n      messages: [\n        { role: \"system\", content: system },\n        { role: \"user\",   content: user }\n      ],\n      stream: false,\n      format: \"json\",\n      keep_alive: \"10m\",\n      options: {\n        temperature: 0.1,\n        top_p: 0.9,\n        num_predict: 450,   // â evita corte\n        num_ctx: 1024,\n        num_batch: 128,\n        num_gpu: 999\n      }\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -384,
        208
      ],
      "id": "4091dada-bdc0-4a76-a285-033a074fabcf",
      "name": "Prep Insights"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:11434/api/chat",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.body) }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -192,
        208
      ],
      "id": "11d1539f-26e2-4818-994b-3331ea3ae0d1",
      "name": "Ollama â Generate"
    },
    {
      "parameters": {
        "jsCode": "// Converte a resposta do modelo em itens (1 por insight) e calcula content_hash (sem require)\n\n// <- dados do \"Prep Insights\"\nconst prev = $item(0).$node[\"Prep Insights\"].json;\nconst res  = $json;\n\n// conteÃºdo retornado pelo /api/chat (Ollama)\nlet content = (res && res.message && typeof res.message.content === 'string')\n  ? res.message.content\n  : '';\n\n// parser tolerante para pegar o JSON mesmo com ``` ou texto extra\nfunction safeParse(s) {\n  if (!s || typeof s !== 'string') return null;\n  try { return JSON.parse(s); } catch {}\n  const noTicks = s.replace(/^```json|^```|```$/g, '');\n  try { return JSON.parse(noTicks); } catch {}\n  const first = s.indexOf('{');\n  const last  = s.lastIndexOf('}');\n  if (first !== -1 && last !== -1 && last > first) {\n    const mid = s.slice(first, last + 1);\n    try { return JSON.parse(mid); } catch {}\n  }\n  return null;\n}\n\nlet parsed = safeParse(content);\nif (!parsed || typeof parsed !== 'object') parsed = { insights: [] };\nconst insights = Array.isArray(parsed.insights) ? parsed.insights : [];\n\n// metadados do modelo\nconst meta = {\n  model: res.model,\n  created_at: res.created_at,\n  prompt_tokens: res.prompt_eval_count ?? null,\n  completion_tokens: res.eval_count ?? null,\n};\n\n// --------- HASH sem crypto (FNV-1a 32-bit + len) ---------\nfunction contentHash(ins) {\n  const s = [\n    ins.title || '',\n    ins.summary || '',\n    ins.category || '',\n    ins.priority || '',\n    ins.suggested_action || ''\n  ].join('|');\n\n  let h = 0x811c9dc5; // offset basis\n  for (let i = 0; i < s.length; i++) {\n    h ^= s.charCodeAt(i);\n    // FNV-1a prime *h (em 32 bits)\n    h = (h + ((h << 1) + (h << 4) + (h << 7) + (h << 8) + (h << 24))) >>> 0;\n  }\n  // hex de 8 chars + comprimento (reduz colisÃ£o prÃ¡tica para dedupe)\n  return h.toString(16).padStart(8,'0') + '-' + s.length.toString(16).padStart(4,'0');\n}\n// ---------------------------------------------------------\n\nfunction rowFrom(ins) {\n  const content_hash = contentHash(ins);\n  return {\n    insight_id: `${prev.link_id}-${(Math.random().toString(36).slice(2,10))}`,\n    link_id: prev.link_id,\n    source_from: prev.date_from,\n    source_to: prev.date_to,\n    generated_at: new Date().toISOString(),\n\n    title: ins.title,\n    insight: ins.summary,\n    category: ins.category,\n    priority: ins.priority,\n    action: ins.suggested_action,\n    confidence: ins.confidence,\n\n    content_hash,\n    metrics_json: prev.metrics_json,\n    model: meta.model,\n    // se quiser guardar temperatura, pegue do prev.body.options.temperature\n    temperature: (prev && prev.body && prev.body.options && typeof prev.body.options.temperature === 'number')\n      ? prev.body.options.temperature\n      : 0.1,\n    prompt_tokens: meta.prompt_tokens,\n    completion_tokens: meta.completion_tokens,\n\n    // campos de Ã¡udio comeÃ§am vazios (serÃ£o preenchidos depois do Save)\n    audio_url: \"\",\n    audio_status: \"\",\n    audio_hash: \"\",\n    voice: \"\",\n    tts_model: \"\",\n    audio_updated_at: \"\"\n  };\n}\n\nif (insights.length === 0) {\n  return [{\n    json: rowFrom({\n      title: \"Sem JSON vÃ¡lido do modelo\",\n      summary: \"Modelo nÃ£o retornou {insights} ou veio truncado.\",\n      category: \"alerts\",\n      priority: \"low\",\n      suggested_action: \"Reexecutar com prompt rÃ­gido ou aumentar num_predict.\",\n      confidence: 0,\n    }),\n  }];\n}\n\nreturn insights.map((ins) => ({ json: rowFrom(ins) }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -16,
        208
      ],
      "id": "20388aeb-cdd4-4b47-9913-06d7db560a7c",
      "name": "Parse Ollama"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1h-xknv9IelCmariwIkh0lIGhSgwgQzHoG6V9nB9dsps",
          "mode": "list",
          "cachedResultName": "Dados App Financeiro",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1h-xknv9IelCmariwIkh0lIGhSgwgQzHoG6V9nB9dsps/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1754051256,
          "mode": "list",
          "cachedResultName": "AI_Insights",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1h-xknv9IelCmariwIkh0lIGhSgwgQzHoG6V9nB9dsps/edit#gid=1754051256"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "insight_id": "={{ $json.insight_id }}",
            "link_id": "={{ $json.link_id }}",
            "source_from": "={{ $json.source_from }}",
            "source_to": "={{ $json.source_to }}",
            "generated_at": "={{ $json.generated_at }}",
            "title": "={{ $json.title }}",
            "insight": "={{ $json.insight }}",
            "category": "={{ $json.category }}",
            "priority": "={{ $json.priority }}",
            "action": "={{ $json.action }}",
            "confidence": "={{ $json.confidence }}",
            "metrics_json": "={{ $json.metrics_json }}",
            "model": "={{ $json.model }}",
            "temperature": "={{ $json.temperature }}",
            "prompt_tokens": "={{ $json.prompt_tokens }}",
            "completion_tokens": "={{ $json.completion_tokens }}",
            "content_hash": "={{ $json.content_hash }}",
            "audio_seconds": "==\"\""
          },
          "matchingColumns": [
            "insight_id"
          ],
          "schema": [
            {
              "id": "insight_id",
              "displayName": "insight_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "link_id",
              "displayName": "link_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "source_from",
              "displayName": "source_from",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "source_to",
              "displayName": "source_to",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "generated_at",
              "displayName": "generated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "insight",
              "displayName": "insight",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "category",
              "displayName": "category",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "priority",
              "displayName": "priority",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "action",
              "displayName": "action",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "confidence",
              "displayName": "confidence",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "metrics_json",
              "displayName": "metrics_json",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "model",
              "displayName": "model",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "temperature",
              "displayName": "temperature",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "prompt_tokens",
              "displayName": "prompt_tokens",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "completion_tokens",
              "displayName": "completion_tokens",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "audio_url",
              "displayName": "audio_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "audio_status",
              "displayName": "audio_status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "audio_seconds",
              "displayName": "audio_seconds",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "voice",
              "displayName": "voice",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "tts_model",
              "displayName": "tts_model",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "audio_updated_at",
              "displayName": "audio_updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "audio_hash",
              "displayName": "audio_hash",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "content_hash",
              "displayName": "content_hash",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -416,
        -32
      ],
      "id": "1a04fcff-81f8-4ffa-a33e-db04cef7a040",
      "name": "Save Insights",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "uW5EFVki21ARxBHX",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Monta a fala curta e objetiva com o que interessa pro app\nfunction clean(s) {\n  if (!s) return '';\n  return String(s).replace(/\\s+/g, ' ').trim();\n}\nconst title = clean($json.title);\nconst insight = clean($json.insight);\nconst priority = clean($json.priority || '');\nconst category = clean($json.category || '');\n\nconst voice = \"pt_BR-edresson-low\";  // mesma voz que vocÃª testou\nconst ttsText =\n  title && insight\n    ? `Resumo: ${title}. ${insight} (prioridade ${priority || 'mÃ©dia'}, categoria ${category || 'geral'}).`\n    : (title || insight || \"VocÃª tem um novo insight financeiro.\");\n\nreturn [{\n  json: {\n    insight_id: $json.insight_id,\n    link_id: $json.link_id,\n    title,\n    tts: {\n      url: \"http://localhost:8800/tts\",\n      payload: {\n        text: ttsText,\n        format: \"wav\",      // <<< trocado para WAV\n        voice: voice,\n        save: true\n      },\n      voice,\n      model: \"piper\"\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        112,
        -16
      ],
      "id": "2cd77fb4-93da-483a-8738-8b5dfb486f70",
      "name": "Build TTS Payload"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.tts.url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Accept",
              "value": "audio/wav"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json.tts.payload}}",
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "file"
            }
          },
          "timeout": 120000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        272,
        -16
      ],
      "id": "2d7ad2af-c3d6-42c2-8c8c-16f644543570",
      "name": "TTS â Request",
      "retryOnFail": true
    },
    {
      "parameters": {
        "name": "={{ \n   $('Save Insights').item.json.insight_id\n}}-{{ \n   $('Save Insights').item.json.content_hash\n}}.wav\n",
        "driveId": {
          "__rl": true,
          "value": "My Drive",
          "mode": "list",
          "cachedResultName": "My Drive",
          "cachedResultUrl": "https://drive.google.com/drive/my-drive"
        },
        "folderId": {
          "__rl": true,
          "value": "1V_rX0ps6LOUJQTOWpcfDSE9m-sWYu9SJ",
          "mode": "list",
          "cachedResultName": "output",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1V_rX0ps6LOUJQTOWpcfDSE9m-sWYu9SJ"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        448,
        -16
      ],
      "id": "55aa2611-1942-4fbd-83b1-4358ec044025",
      "name": "Upload file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "0OoWbrd1L4oeIHaA",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -112,
        -48
      ],
      "id": "55b2173e-3585-4400-b13c-a00d189b062e",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "/**\n * Code in JavaScript1 â gera URL de Ã¡udio tocÃ¡vel no app\n * Modo: Run Once for Each Item\n */\nconst i = $itemIndex;\n\n// Itens alinhados por Ã­ndice\nconst upItems     = $items('Upload file', 0, 0);\nconst savedItems  = $items('Save Insights', 0, 0);\nconst payloadItems= $items('Build TTS Payload', 0, 0);\n\nconst up      = upItems[i]?.json ?? {};\nconst saved   = savedItems[i]?.json ?? {};\nconst payload = payloadItems[i]?.json ?? {};\n\n// Tenta extrair o ID real do arquivo (do Upload)\nlet fileId =\n  up.id ||\n  up.file?.id ||\n  up.data?.id ||\n  up.resourceId ||\n  null;\n\n// Fallback: extrai do webViewLink se necessÃ¡rio\nif (!fileId && typeof up.webViewLink === 'string') {\n  const m = up.webViewLink.match(/\\/d\\/([^/]+)/);\n  if (m) fileId = m[1];\n}\n\n// ConstrÃ³i URLs\nlet audio_direct = '';\nlet audio_url = '';\n\nif (fileId) {\n  // URL direta â ideal para <audio src=\"...\">\n  audio_direct = `https://drive.google.com/uc?export=download&id=${fileId}`;\n  // Para o app, use a direta (sem o viewer do Drive)\n  audio_url = audio_direct;\n} else {\n  // Fallbacks do prÃ³prio node do Drive\n  audio_direct = up.webContentLink || '';\n  audio_url = audio_direct || up.webViewLink || '';\n}\n\nreturn {\n  json: {\n    // chave para casadear no Sheets\n    insight_id:   saved.insight_id || payload.insight_id || '',\n    content_hash: saved.content_hash || payload.content_hash || '',\n\n    // Ã¡udio\n    audio_url,        // <- use este no app\n    audio_direct,     // opcional para baixar\n    audio_seconds: null,\n    voice:     payload.tts?.voice  || 'pt_BR-edresson-low',\n    tts_model: payload.tts?.model  || 'piper',\n    audio_hash: saved.content_hash || payload.content_hash || '',\n    audio_status: audio_url ? 'done' : 'missing',\n    audio_updated_at: new Date().toISOString(),\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        144,
        -304
      ],
      "id": "21ef993a-8609-447b-b224-1ad9775e3c1f",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1h-xknv9IelCmariwIkh0lIGhSgwgQzHoG6V9nB9dsps",
          "mode": "list",
          "cachedResultName": "Dados App Financeiro",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1h-xknv9IelCmariwIkh0lIGhSgwgQzHoG6V9nB9dsps/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1754051256,
          "mode": "list",
          "cachedResultName": "AI_Insights",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1h-xknv9IelCmariwIkh0lIGhSgwgQzHoG6V9nB9dsps/edit#gid=1754051256"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "insight_id": "={{ $('Save Insights').item.json.insight_id }}",
            "audio_url": "={{ $json.audio_url }}",
            "voice": "={{ $json.voice }}",
            "tts_model": "={{ $json.tts_model }}",
            "audio_status": "={{ $json.audio_status }}",
            "audio_hash": "={{ $json.audio_hash }}",
            "content_hash": "={{ $('Save Insights').item.json.content_hash }}",
            "audio_updated_at": "={{ $json.audio_updated_at }}",
            "audio_seconds": "={{ $json.audio_seconds }}"
          },
          "matchingColumns": [
            "insight_id"
          ],
          "schema": [
            {
              "id": "insight_id",
              "displayName": "insight_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "link_id",
              "displayName": "link_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "source_from",
              "displayName": "source_from",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "source_to",
              "displayName": "source_to",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "generated_at",
              "displayName": "generated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "insight",
              "displayName": "insight",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "category",
              "displayName": "category",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "priority",
              "displayName": "priority",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "action",
              "displayName": "action",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "confidence",
              "displayName": "confidence",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "metrics_json",
              "displayName": "metrics_json",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "model",
              "displayName": "model",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "temperature",
              "displayName": "temperature",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "prompt_tokens",
              "displayName": "prompt_tokens",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "completion_tokens",
              "displayName": "completion_tokens",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "audio_url",
              "displayName": "audio_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "audio_status",
              "displayName": "audio_status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "audio_seconds",
              "displayName": "audio_seconds",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "voice",
              "displayName": "voice",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "tts_model",
              "displayName": "tts_model",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "audio_updated_at",
              "displayName": "audio_updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "audio_hash",
              "displayName": "audio_hash",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "content_hash",
              "displayName": "content_hash",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        368,
        -352
      ],
      "id": "9e3093f5-95a9-46be-a2a2-db4eb9bcb10b",
      "name": "Append or update row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "uW5EFVki21ARxBHX",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "share",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "permissionsUi": {
          "permissionsValues": {
            "role": "reader",
            "type": "anyone"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        608,
        -16
      ],
      "id": "00c6604f-6797-4279-9b99-27b097f683c6",
      "name": "Share file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "0OoWbrd1L4oeIHaA",
          "name": "Google Drive account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Transactions": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Accounts": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get People": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Dashboard": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Build Nested Owners",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Nested Owners": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Get People",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Accounts",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Transactions",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Dashboard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Save Insights",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prep Insights",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prep Insights": {
      "main": [
        [
          {
            "node": "Ollama â Generate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama â Generate": {
      "main": [
        [
          {
            "node": "Parse Ollama",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Ollama": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Insights": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build TTS Payload": {
      "main": [
        [
          {
            "node": "TTS â Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TTS â Request": {
      "main": [
        [
          {
            "node": "Upload file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload file": {
      "main": [
        [
          {
            "node": "Share file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Build TTS Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "Append or update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Share file": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "5b997315-8d87-4873-a2ae-5ce44841af31",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "97ee746f263d76b0d63206a311d80c1cb2bf5798526b9a58072b9fa593fd48a2"
  },
  "id": "HXLjWFzwKSJ6c8Sq",
  "tags": []
}